[case testDictGet]
from typing import Dict
def f(d: Dict[int, bool]) -> bool:
    return d[0]
[out]
def f(d):
    d :: dict
    r0, r1 :: object
    r2 :: bool
L0:
    r0 = box(short_int, 0)
    r1 = CPyDict_GetItem(d, r0)
    r2 = unbox(bool, r1)
    return r2

[case testDictSet]
from typing import Dict
def f(d: Dict[int, bool]) -> None:
    d[0] = False
[out]
def f(d):
    d :: dict
    r0 :: bool
    r1, r2 :: object
    r3 :: int32
    r4 :: None
L0:
    r0 = False
    r1 = box(short_int, 0)
    r2 = box(bool, r0)
    r3 = CPyDict_SetItem(d, r1, r2)
    r4 = None
    return r4

[case testNewEmptyDict]
from typing import Dict
def f() -> None:
    d = {}  # type: Dict[bool, int]
[out]
def f():
    r0, d :: dict
    r1 :: None
L0:
    r0 = PyDict_New()
    d = r0
    r1 = None
    return r1

[case testNewDictWithValues]
def f(x: object) -> None:
    d = {1: 2, '': x}
[out]
def f(x):
    x :: object
    r0 :: str
    r1, r2 :: object
    r3, d :: dict
    r4 :: None
L0:
    r0 = unicode_1 :: static
    r1 = box(short_int, 2)
    r2 = box(short_int, 4)
    r3 = CPyDict_Build(2, r1, r2, r0, x)
    d = r3
    r4 = None
    return r4

[case testInDict]
from typing import Dict
def f(d: Dict[int, int]) -> bool:
    if 4 in d:
        return True
    else:
        return False
[out]
def f(d):
    d :: dict
    r0 :: object
    r1 :: int32
    r2, r3, r4 :: bool
L0:
    r0 = box(short_int, 8)
    r1 = PyDict_Contains(d, r0)
    r2 = truncate r1: int32 to builtins.bool
    if r2 goto L1 else goto L2 :: bool
L1:
    r3 = True
    return r3
L2:
    r4 = False
    return r4
L3:
    unreachable

[case testNotInDict]
from typing import Dict
def f(d: Dict[int, int]) -> bool:
    if 4 not in d:
        return True
    else:
        return False
[out]
def f(d):
    d :: dict
    r0 :: object
    r1 :: int32
    r2, r3, r4, r5 :: bool
L0:
    r0 = box(short_int, 8)
    r1 = PyDict_Contains(d, r0)
    r2 = truncate r1: int32 to builtins.bool
    r3 = !r2
    if r3 goto L1 else goto L2 :: bool
L1:
    r4 = True
    return r4
L2:
    r5 = False
    return r5
L3:
    unreachable

[case testDictUpdate]
from typing import Dict
def f(a: Dict[int, int], b: Dict[int, int]) -> None:
    a.update(b)
[out]
def f(a, b):
    a, b :: dict
    r0 :: int32
    r1, r2 :: None
L0:
    r0 = CPyDict_Update(a, b)
    r1 = None
    r2 = None
    return r2

[case testDictKeyLvalue]
from typing import Dict
def increment(d: Dict[str, int]) -> Dict[str, int]:
    for k in d:
        d[k] += 1
    return d
[out]
def increment(d):
    d :: dict
    r0 :: short_int
    r1 :: int
    r2 :: object
    r3 :: tuple[bool, int, object]
    r4 :: int
    r5 :: bool
    r6 :: object
    k, r7 :: str
    r8 :: object
    r9, r10 :: object
    r11 :: int32
    r12, r13 :: bool
L0:
    r0 = 0
    r1 = len d :: dict
    r2 = CPyDict_GetKeysIter(d)
L1:
    r3 = CPyDict_NextKey(r2, r0)
    r4 = r3[1]
    r0 = r4
    r5 = r3[0]
    if r5 goto L2 else goto L4 :: bool
L2:
    r6 = r3[2]
    r7 = cast(str, r6)
    k = r7
    r8 = CPyDict_GetItem(d, k)
    r9 = box(short_int, 2)
    r10 = r8 += r9
    r11 = CPyDict_SetItem(d, k, r10)
L3:
    r12 = CPyDict_CheckSize(d, r1)
    goto L1
L4:
    r13 = CPy_NoErrOccured()
L5:
    return d

[case testDictDisplay]
from typing import Dict
def f(x: str, y: Dict[str, int]) -> Dict[str, int]:
    return {x: 2, **y, 'z': 3}
[out]
def f(x, y):
    x :: str
    y :: dict
    r0 :: str
    r1 :: object
    r2 :: dict
    r3 :: int32
    r4 :: object
    r5 :: int32
L0:
    r0 = unicode_3 :: static  ('z')
    r1 = box(short_int, 4)
    r2 = CPyDict_Build(1, x, r1)
    r3 = CPyDict_UpdateInDisplay(r2, y)
    r4 = box(short_int, 6)
    r5 = CPyDict_SetItem(r2, r0, r4)
    return r2

[case testDictIterationMethods]
from typing import Dict
def print_dict_methods(d1: Dict[int, int], d2: Dict[int, int]) -> None:
    for v in d1.values():
        if v in d2:
            return
    for k, v in d2.items():
        d2[k] += v
[out]
def print_dict_methods(d1, d2):
    d1, d2 :: dict
    r0 :: short_int
    r1 :: int
    r2 :: object
    r3 :: tuple[bool, int, object]
    r4 :: int
    r5 :: bool
    r6 :: object
    v, r7 :: int
    r8 :: object
    r9 :: int32
    r10 :: bool
    r11 :: None
    r12, r13 :: bool
    r14 :: short_int
    r15 :: int
    r16 :: object
    r17 :: tuple[bool, int, object, object]
    r18 :: int
    r19 :: bool
    r20, r21 :: object
    r22, r23, k :: int
    r24, r25, r26, r27, r28 :: object
    r29 :: int32
    r30, r31 :: bool
    r32 :: None
L0:
    r0 = 0
    r1 = len d1 :: dict
    r2 = CPyDict_GetValuesIter(d1)
L1:
    r3 = CPyDict_NextValue(r2, r0)
    r4 = r3[1]
    r0 = r4
    r5 = r3[0]
    if r5 goto L2 else goto L6 :: bool
L2:
    r6 = r3[2]
    r7 = unbox(int, r6)
    v = r7
    r8 = box(int, v)
    r9 = PyDict_Contains(d2, r8)
    r10 = truncate r9: int32 to builtins.bool
    if r10 goto L3 else goto L4 :: bool
L3:
    r11 = None
    return r11
L4:
L5:
    r12 = CPyDict_CheckSize(d1, r1)
    goto L1
L6:
    r13 = CPy_NoErrOccured()
L7:
    r14 = 0
    r15 = len d2 :: dict
    r16 = CPyDict_GetItemsIter(d2)
L8:
    r17 = CPyDict_NextItem(r16, r14)
    r18 = r17[1]
    r14 = r18
    r19 = r17[0]
    if r19 goto L9 else goto L11 :: bool
L9:
    r20 = r17[2]
    r21 = r17[3]
    r22 = unbox(int, r20)
    r23 = unbox(int, r21)
    k = r22
    v = r23
    r24 = box(int, k)
    r25 = CPyDict_GetItem(d2, r24)
    r26 = box(int, v)
    r27 = r25 += r26
    r28 = box(int, k)
    r29 = CPyDict_SetItem(d2, r28, r27)
L10:
    r30 = CPyDict_CheckSize(d2, r15)
    goto L8
L11:
    r31 = CPy_NoErrOccured()
L12:
    r32 = None
    return r32

